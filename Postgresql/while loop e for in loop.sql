DROP FUNCTION TABUADA;
/*
LOOP
	(RETURN NEXT)
EXIT WHEN
*/
CREATE OR REPLACE FUNCTION TABUADA(NUMERO INTEGER) RETURNS SETOF VARCHAR AS $$ 
	DECLARE
	MULTIPLICADOR INTEGER DEFAULT 1;
	BEGIN
		LOOP
			RETURN NEXT NUMERO || ' x ' || MULTIPLICADOR || ' = ' || NUMERO * MULTIPLICADOR;			
			MULTIPLICADOR := MULTIPLICADOR + 1;			
			EXIT WHEN MULTIPLICADOR = 10;
		END LOOP;	
	END;
$$ LANGUAGE PLPGSQL;

SELECT TABUADA(9);
/*
WHILE LOOP
	RETURN NEXT
*/
CREATE OR REPLACE FUNCTION TABUADA(NUMERO INTEGER) RETURNS SETOF VARCHAR AS $$ 
	DECLARE
	MULTIPLICADOR INTEGER DEFAULT 1;
	BEGIN
		WHILE MULTIPLICADOR < 10 LOOP
			RETURN NEXT NUMERO || ' x ' || MULTIPLICADOR || ' = ' || NUMERO * MULTIPLICADOR;			
			MULTIPLICADOR := MULTIPLICADOR + 1;			
		END LOOP;	
	END;
$$ LANGUAGE PLPGSQL;
/*
FOR IN LOOP
	RETURN NEXT
OBS.:(NÃO PRECISA DECLARAR A VARIÁVEL COM 'DECLARE')
*/
CREATE OR REPLACE FUNCTION TABUADA(NUMERO INTEGER) RETURNS SETOF VARCHAR AS $$ 
	BEGIN
		FOR MULTIPLICADOR IN 1..9 LOOP
			RETURN NEXT NUMERO || ' x ' || MULTIPLICADOR || ' = ' || NUMERO * MULTIPLICADOR;			
			MULTIPLICADOR := MULTIPLICADOR + 1;			
		END LOOP;	
	END;
$$ LANGUAGE PLPGSQL;

CREATE FUNCTION INSTRUTOR_COM_SALARIO(OUT NOME VARCHAR, OUT SALARIO_OK VARCHAR) RETURNS SETOF RECORD AS $$ 
	DECLARE
		INSTRUTOR INSTRUTOR;
	BEGIN
		FOR INSTRUTOR IN SELECT * FROM INSTRUTOR LOOP
			NOME := INSTRUTOR.NOME;
			SALARIO_OK = SALARIO_OK(INSTRUTOR.ID);
			RETURN NEXT;
		END LOOP;
	END;
$$ LANGUAGE PLPGSQL;

SELECT * FROM INSTRUTOR_COM_SALARIO();